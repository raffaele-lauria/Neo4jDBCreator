/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package it.unibas.mythesis.view;

import it.unibas.mythesis.Application;
import it.unibas.mythesis.Constant;

import javax.swing.*;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.dnd.DnDConstants;
import java.awt.dnd.DropTarget;
import java.awt.dnd.DropTargetAdapter;
import java.awt.dnd.DropTargetDropEvent;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author raffa
 */
public class DBManagementPanel extends javax.swing.JDialog {

    /**
     * Creates new form DBManagementPanel
     *
     * @param frameView
     */
    public DBManagementPanel(FrameView frameView) {
        super(frameView);
    }

    public void initialize() {
        initComponents();
        initLabels();
        initActions();
    }

    public void open() {
        this.setModal(true);
        this.pack();
        this.setLocationRelativeTo(this.getParent());
        this.setVisible(true);
    }

    public void close() {
        this.setVisible(false);
    }
    
    private void initLabels(){
        this.welcomeLabel.setText("DROP below the PDF files you want to insert!");
        this.labelPDFsDrop.setText("** DROP HERE your PDF files **!");
        this.updatesLabel.setText("Status updates will be displayed HERE.");
    }

    public void setDropLabel(String text) {
        this.labelPDFsDrop.setText(text);
    }

    public void setUpdatesLabel(String update) {
        this.updatesLabel.setText(update);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        welcomeLabel = new javax.swing.JLabel();
        recapButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();
        dropPanel = new JScrollPane();
        labelPDFsDrop = new javax.swing.JLabel();
        createDBButton = new javax.swing.JButton();
        dropDBButton = new javax.swing.JButton();
        JScrollPane jScrollPane1 = new JScrollPane();
        updatesLabel = new javax.swing.JLabel();
        javax.swing.JLabel label1 = new javax.swing.JLabel();
        detachDBButton = new javax.swing.JButton();
        resetButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        welcomeLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        welcomeLabel.setText("Welcome");

        recapButton.setText("Summary");
        recapButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recapButtonActionPerformed(evt);
            }
        });

        closeButton.setText("Chiudi");

        labelPDFsDrop.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelPDFsDrop.setText("labelDrop");
        dropPanel.setViewportView(labelPDFsDrop);

        createDBButton.setText("createDB");

        dropDBButton.setText("DropDB");
        dropDBButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dropDBButtonActionPerformed(evt);
            }
        });

        updatesLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        updatesLabel.setText("jLabel1");
        jScrollPane1.setViewportView(updatesLabel);

        label1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label1.setText("*** UPDATES ***");

        detachDBButton.setText("DetachDB");
        detachDBButton.setToolTipText("");

        resetButton.setText("Reset");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(closeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(dropPanel)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(recapButton, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(resetButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane1)
                    .addComponent(welcomeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(createDBButton, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dropDBButton, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(detachDBButton, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(label1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(welcomeLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dropPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(resetButton, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE)
                    .addComponent(recapButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                .addComponent(label1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(createDBButton, javax.swing.GroupLayout.DEFAULT_SIZE, 48, Short.MAX_VALUE)
                    .addComponent(dropDBButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(detachDBButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void dropDBButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dropDBButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dropDBButtonActionPerformed

    private void recapButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recapButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_recapButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeButton;
    private javax.swing.JButton createDBButton;
    private javax.swing.JButton detachDBButton;
    private javax.swing.JButton dropDBButton;
    private JScrollPane dropPanel;
    private javax.swing.JLabel labelPDFsDrop;
    private javax.swing.JButton recapButton;
    private javax.swing.JButton resetButton;
    private javax.swing.JLabel updatesLabel;
    private javax.swing.JLabel welcomeLabel;
    // End of variables declaration//GEN-END:variables

    private void initActions() {
        //INITIALIZE FILE LIST
        List<File> pdfList = new ArrayList<>();
        Application.getInstance().getModel().putBean(Constant.PDF_LIST, pdfList);
        
        this.closeButton.setAction(Application.getInstance().getDBManagementPanelControl().getCloseAction());
        this.recapButton.setAction(Application.getInstance().getDBManagementPanelControl().getAzioneRiepilogo());
        this.createDBButton.setAction(Application.getInstance().getDBManagementPanelControl().getAzioneCreaDB());
        this.dropDBButton.setAction(Application.getInstance().getDBManagementPanelControl().getDropDBAction());
        this.detachDBButton.setAction(Application.getInstance().getDBManagementPanelControl().getDetachDBAction());
        this.resetButton.setAction(Application.getInstance().getDBManagementPanelControl().getResetAction());

        var mdtl = new MyDropTargetListener(dropPanel);
    }

    private class MyDropTargetListener extends DropTargetAdapter {

        private final DropTarget dropTarget;
        private final JScrollPane scrollPane;

        public MyDropTargetListener(JScrollPane panel) {
            this.scrollPane = panel;
            dropTarget = new DropTarget(scrollPane, DnDConstants.ACTION_COPY, this, true, null);
        }

        @Override
        public void drop(DropTargetDropEvent event) {
            int counter = 0;
            List<File> pdfList = (List<File>) Application.getInstance().getModel().getBean(Constant.PDF_LIST);
            event.acceptDrop(DnDConstants.ACTION_COPY);
            Transferable transferable = event.getTransferable();
            DataFlavor[] flavors = transferable.getTransferDataFlavors();
            for (DataFlavor flavor : flavors) {
                if (flavor.isFlavorJavaFileListType()) {
                    List<File> files = null;
                    try {
                        files = (List<File>) transferable.getTransferData(flavor);
                        for (File file : files) {
                            String percorso = file.getPath();
                            int lunghezza = percorso.length();
                            System.out.println(lunghezza);
                            if (percorso.charAt(lunghezza - 1) != 'f'
                                || percorso.charAt(lunghezza - 2) != 'd'
                                || percorso.charAt(lunghezza - 3) != 'p') {
                                Application.getInstance().getFrameView().showErrorMessage("The application only interacts with PDF format files, try again.");
                                return;
                            }
                        }
                    } catch (UnsupportedFlavorException ex) {
                        System.out.println("File not supported");
                    } catch (IOException ex) {
                        System.out.println("Loading problems.");
                    }
                    for (File file : files) {
                        pdfList.add(file);
                        counter++;
                        System.out.println("File n." + counter + " added!");
                    }
                }
            }
            if (pdfList.isEmpty()) {
                Application.getInstance().getDBManagementPanel().setDropLabel("ERROR: no file uploaded or there was an upload error. Try again!");
                return;
            }
            Application.getInstance().getModel().putBean(Constant.PDF_LIST, pdfList);
            Application.getInstance().getDBManagementPanel().setDropLabel("File successfully uploaded!");
        }

    }

}
